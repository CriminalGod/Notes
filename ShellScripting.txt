Linux

Open source Operating System
Access to Source code

CLI(Command Line Interface)		Eg: linux, ubuntu
GUI(Graphical User Interface)	Eg: windows

Command Line Interface				|		Graphical User Interface
-------------------------------------------------------------------------
Console representation				|	Graphical representation
Faster OS							|	Slower OS
Granular Control					|	Lesser Control


YOU MUST KNOW BEFORE STARTING LINUX
Shell Script
Kernel
Shell

SHELL SCRIPT
-list of commands, which are listed in the order of execution.
-for comments (#sign).

KERNEL
- it manages the facilities available in OS
- it performs following tasks
	1. I/O Management
	2. Process Management
	3. Device Management
	4. File Management
	5. Memory Management

LINUX SHELL
- Shell accepts our commands and converts them to Binary Language which can understand by System.

SHELL TYPES
- Bourne Shell Types
	1. Bourne Shell
	2. Korn Shell
	3. Bourne Again Shell (BASH)
	4. Posix Shell
	
- C Shell Types
	1. C Shell
	2. Z Shell
	3. Tenex/tops C Shell
	

Basic Linux Commands:

pwd 	- 	present working directory - gives absolute path
ls 		-	gives the list of files present in the current directory
ls-a	-	you can see all hidden files by using this command
cd		- 	change directory
cp		-	copy
rm		-	remove
mv		-	move
echo	-	print
mkdir	-	make directory
clear	-	clear screen
touch	-	to create a file
rmdir	-	remove directory
cat		-	to display content of a file
nano, vi-	installed text editors - you can create a new file or modify a file using these editors
chmod	-	to change the permissions granted to a file
	


.pem	-	privacy enchanced mail
.ppk	-
.sh		- standard shell

puttygen.exe 	- used to convert pem file to ppk file
putty 			- used to connect with our server


sudo	-	SuperUser Do
sudo su -	You can enter the root command line using this command

nano cfss.txt
nano myScript.sh

#!/bin/bash		-	this line called shebang - it tells the shell what program to interpret the script with, when executed.


ls -l

-rwx------ 1 root root   83 Aug 14 06:09 myScript.sh			-	file
drwxr-xr-x 2 root root 4096 Aug 13 16:17 newFolder				-	directory

-rw-r--r--

- 	rwx 	--- 	---
- 	--- 	--- 	---
	owner	group	users

0=0=nothing
1=1=execute(e)
2=2=write(w)
3=2+1=write(w) + execute(x)
4=4=read(r)
5=4+1=read(r) + execute(x)
6=4+2= r+w
7=4+2+1= r+w+x

chmod 700 myScript.sh

		owner	group	users
chmod 	7 		0 		0 		myScript.sh
		rwx 	--- 	---


Shell Scripting
Shell Types
bash ---> prompt ---> $
k-shell ---> $
c-shell ---> %

echo $0	-	gives current using shell

system defined variables
echo $LOGNAME
echo $HOST
echo $USER
echo $HOME

user defined variables



INTERACTIVE SHELL SCRIPTING(takes input from user)
NON INTERACTIVE SHELL SCRIPTING(doesn't takes any input)

#!/bin/bash
echo "What is yuour Name?"
read person
echo "Hey $person"


ADD NEW USER

useradd -m criminalgod

SET PASSWORD TO CREATED USER
passwd criminalgod


root@ip-172-31-89-76:/home/ubuntu# useradd -m criminalgod
root@ip-172-31-89-76:/home/ubuntu# passwd criminalgod
Enter new UNIX password:
Retype new UNIX password:
Sorry, passwords do not match
passwd: Authentication token manipulation error
passwd: password unchanged

root@ip-172-31-89-76:/home/ubuntu# passwd criminalgod
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully


cat /etc/passwd			-	shows list of users

ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
criminalgod:x:1001:1001::/home/criminalgod:/bin/sh

nano /etc/ssh/sshd_config

-set passwordauthentication to yes

service ssh restart

-login with new user

whoami  -	writes the user name (i.e., login name) of the owner of the current login session to standard output.
Standard output	is, by default, the display screen, unless redirected to a file, printer, etc.


$ whoami
criminalgod
$ pwd
/home/criminalgod
$ ls
$ ls -a
.  ..  .bash_logout  .bashrc  .cache  .gnupg  .profile
$ ls -l
total 0
$


etc		-	is a folder which contains all your system configuration files.
ssh		-	secure shell, i provides security for network.
sshd	-	it handles user authentiacation, teminal connection, encryption etc.


AUTOMATIC USER CREATION USING SCRIPT

-p	-> prompt
-s	-> secure string
-r	-> recursive removal

#!/bin/bash
read -p "Please Enter User Name: " username
read -s -p "Please Enter Password: "
useradd $username
echo "$username:$password" | sudo chpasswd

userdel -r username

DEBUGGING